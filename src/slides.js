export default [
  {
    title: 'Generators',
    text: 'Normal functions, but not really...',
    img: '',
    items: [],
  },
  {
    title: 'Generators',
    text: null,
    img: '',
    items: [
      'normal functions have one return',
      'generators can return multiple values',
      'syntax is familiar',
      'use cases are...',
      'another thing about generators',
    ],
  },
  {
    title: 'Generators - Syntax',
    img: '',
    text: 'Same syntax as a normal Function constructor, just add a * between the function keyword and the name',
    items: [],
  },
  {
    title: 'Generators - Syntax',
    img: './img/syntax.png',
    text: '',
    items: [],
  },
  {
    title: 'Generators - Syntax',
    text: 'the Yield keyword is used as a Return',
    img: './img/syntax.png',
    items: [],
  },
  {
    title: 'Generators - Syntax',
    text: 'Yield as many times as needed',
    img: './img/syntax.png',
    items: [],
  },
  {
    title: 'Generators - Syntax',
    text: 'Attach the generator to a variable',
    img: './img/syntax.png',
    items: [],
  },
  {
    title: 'Generators - Output',
    text: null,
    img: './img/yield-object.png',
    items: ['we run the generator by calling .next() on the variable'],
  },
  {
    title: 'Generators - Output',
    text: null,
    img: './img/yield-object.png',
    items: [
      'we run the generator by calling .next() on the variable',
      'the output is an object that looks like this',
    ],
  },
  {
    title: 'Generators - Output',
    text: null,
    img: './img/yield-object.png',
    items: [
      'we run the generator by calling .next() on the variable',
      'the output is an object that looks like this',
      'it has a value(the result of the yield), and a done key',
    ],
  },
  {
    title: 'Generators - Output',
    text: 'What happens if we keep .next()ing?',
    img: '',
    items: [],
  },
  {
    title: 'Generators - Output',
    text: '',
    img: './img/yield-sequence.png',
    items: [],
  },
  {
    title: 'Generators - Output',
    text: 'What happens when it is finally done?',
    img: '',
    items: [],
  },
  {
    title: 'Generators - Output',
    text: '',
    img: './img/done-true.png',
    items: [],
  },
  {
    title: 'Generators - Usecases',
    text: 'Why would I use this?',
    img: '',
    items: [],
  },
  {
    title: 'Generators - Usecases',
    text: 'We could use generators for fetch flow control',
    img: './img/flow-example.png',
    items: [],
  },
  {
    title: 'Generators - Usecases',
    text: 'The first run fetches all these users, I need their ids to fetch their posts',
    img: './img/fetch-users.png',
    items: [],
  },
  {
    title: 'Generators - Usecases',
    text: 'Boom! we have all the posts!',
    img: './img/fetch-posts.png',
    items: [],
  },
  {
    title: 'Generators - Usecases',
    text: '',
    img: './img/whatabout.gif',
    items: [],
  },
  {
    title: 'Generators - Usecases',
    text: '',
    img: './img/rous.gif',
    items: [],
  },
  {
    title: 'Generators - Usecases',
    text: null,
    img: '',
    items: [
      'result of unusual size',
    ],
  },
  {
    title: 'Generators - Usecases',
    text: null,
    img: '',
    items: [
      'result of unusual size',
      'simplifying array building functions',
    ],
  },
  {
    title: 'Generators - Usecases',
    text: null,
    img: '',
    items: [
      'result of unusual size',
      'simplifying array building functions',
      'dealing with async code',
    ],
  },
  {
    title: 'Generators - Usecases',
    text: null,
    img: '',
    items: [
      'result of unusual size',
      'simplifying array building functions',
      'dealing with async code',
      'refactoring callbacks',
    ],
  },
  {
    title: 'Generators - Fin',
    text: null,
    items: [
      'Quentions?',
      'Grant Glidewell',
      'gglidewell.com',
      'github.com/ggcadc',
      'this.prototype.grant@gmail.com',
    ],
  },
];
